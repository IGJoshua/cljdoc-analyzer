* following are resolved for me, but good idea to review with project owner (Martin)
** Ignore repos configured by cljdoc, rely on repos configured in analysis runner only
   These are the base maven repos to use and is currently:

   :maven-repositories [{:id "clojars" :url "https://repo.clojars.org/"}
                        {:id "central" :url "http://central.maven.org/maven2/"}]

   But deps.clj has default repos:

   (def ^:private default-repos
     {"central" {:url "https://repo1.maven.org/maven2/"},
      "clojars" {:url "https://repo.clojars.org/"}
      ;; Included to account for https://dev.clojure.org/jira/browse/TDEPS-46
      ;; specifically anything depending on org.immutant/messaging will fail
      ;; this includes compojure-api
      "jboss" {:url "https://repository.jboss.org/nexus/content/groups/public/"}
      ;; included for https://github.com/FundingCircle/jackdaw
      "confluent" {:url "https://packages.confluent.io/maven/"}})

   Which repeats "clojars" and overrides "central".

   So it looks to  me, like I can ignore repos. I think it can safely be removed from cljdoc config.
** Leave shared code brought in from cljdoc as dupe (it is small)
  I have copied in code from cljdoc shared-utils, which is not ideal.
  I have used clj-kondo tools to rip out what is unused to get an idea of what code is duped.
  Options:
  1. dupe shared code in cljdoc-analyzer
     1. PROS: quick
     2. CONS: updates in 2 places
  2. move shared-utils to its own github repo and reuse
     1. PROS: update in 1 place
     2. CONS more awkward for cljdoc authors
  3. move cljdoc-analyzer back under cljdoc analysis runner.
     1. PROS: easier for cljdoc authors
     2. CONS: cljdoc-analyzer will likely not be used outside of cljdoc
   The amount of code is small, I am leaning toward #1 but will bounce of Martin to see if he has a strong opinion.

** Use logging for cljdoc-analyzer.
   Logging to stdout by default.
   Still use println for metagetta to avoid bringing in more deps.
** edn only as commandline perhaps a bit awkward
   added support for ad hoc usage with more conventional cmd line args.
** Reintroduce :exception-handler in runner
   Actually, since metagetta and the runner are coupled, I see no reason to make
   the exception handler externally configurable at this time. We can leave in
   the mechanics from in to configure an exception handler within metagetta, but
   this would be an internal metagetta config only.

   The first version of the exception handler fails on first exception.

** Throw error on duplicate publics in ns
    Martin and I decided that this might make sense, but also that maybe its not that important because it is rare.

    Also... I vaguely remember it being valid to have a macro and a fn with the same name in a ns for cljs?
    This is true, but analyzer only exposes fn, so unique :name within ns is likely still valid.

    I wished, I washed, and decided it might be a protection more against faulty code in metegetta, so decided
    to include the check.

* In progress
** Codox comment sez it return :author on ns. verify.
   Ok, clojure returns all metadata on ns, and cljs return just doc.
   This effectively means that clojure returns :deprecated on ns as well where cljs does not.

   What I'll do:
   Match clj and cljdoc. They will both potentially return the following on ns:
   :doc
   :author
   :deprecated
   :added

   We'll adjust to match codox docs for now: return only author and ignore arbitrary.

** Look at returning all publics
   We currently skip all no-docs which is still appropriate for cljdoc usage but does not satisfy ad hoc usage.
   - added exclude-with array
     for cljdoc main this is hardcoded to [:no-doc :no-wiki]
     for ad hoc main default is nil, can be changed via --exclude-with option
   - next
     add tests that do not exclude no-doc
* General todos
** Add note to readme on potential risk of running?
** Add deploy support
** Does cljdoc make use of codox ^:doc/format?
   It does not look like it.
   I think cljdoc assumes doc strings are in always in markdown format.
** Check impact to cljdoc of changing :codox in edn
   We are moving away from codox. Can we change :codox in our edn to something more generic?
   I think :metadata might be good, but have come to realize that might be a confusing name as folks might
   assume it is, you know, ^:metadata.
   Maybe :publics would be better?
** Add namespace tests
** runner main returns map that is not really used by caller.
   Consider doing any cleanup necessary in finally block and letting exception go through uncaught.  This would
   give the caller more info as to what went wrong.

   Or... include status in generated edn. This would mean that, on failure, the caller could get details
   on the failure by cracking open the edn output file.
* To ponder
** Maybe metagetta doesn't need to write to stdout at all
   Maybe it should just return everything as data and caller can decide what to show.
   Writing to stdout gives feedback while running tho... so kind of nice for devs?
** Include args used in result?
   Might be nice to know what :namespaces and :languages were requested (Actually did I accidentally turf this?)
   Also GMT of run sounds useful.
   But remember.. if we include changing state we are no longer idempotent.
** consider output to stdout for piping?
   Think of borkdude's tools here. Might be nice to simply pipe metadata output through other tools
   We are currently logging to stdout... so we'd have to quiet that completely to support this.
