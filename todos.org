* What to do with shared code?
  I have copied in code from cljdoc shared-utils, which is not ideal.
  I have used clj-kondo tools to rip out what is unused to get an idea of what code is duped.
  Options:
  1. dupe shared code in cljdoc-analyzer
     1. PROS: quick
     2. CONS: updates in 2 places
  2. move shared-utils to its own github repo and reuse
     1. PROS: update in 1 place
     2. CONS more awkward for cljdoc authors
  3. move cljdoc-analyzer back under cljdoc analysis runner.
     1. PROS: easier for cljdoc authors
     2. CONS: cljdoc-analyzer will likely not be used outside of cljdoc
   The amount of code is small, I am leaning toward #1 but will bounce of Martin to see if he has a strong opinion.
* [resolved] Why is repos currently external to runner?
   I'm not sure.
   These are the base maven repos to use and is currently:

   :maven-repositories [{:id "clojars" :url "https://repo.clojars.org/"}
                        {:id "central" :url "http://central.maven.org/maven2/"}]

   But deps.clj has default repos:

   (def ^:private default-repos
     {"central" {:url "https://repo1.maven.org/maven2/"},
      "clojars" {:url "https://repo.clojars.org/"}
      ;; Included to account for https://dev.clojure.org/jira/browse/TDEPS-46
      ;; specifically anything depending on org.immutant/messaging will fail
      ;; this includes compojure-api
      "jboss" {:url "https://repository.jboss.org/nexus/content/groups/public/"}
      ;; included for https://github.com/FundingCircle/jackdaw
      "confluent" {:url "https://packages.confluent.io/maven/"}})

   Which repeats "clojars" and overrides "central".

   So it looks to  me, like I can ignore repos. I think it can safely be removed from cljdoc config.
* Why are jar and pom passsed into runner?
   Is pom not always included in jar for clojure projects?  Maybe not. I shall assume not for now.
* Why are project (group-id/artifact-id) and version passed into runner?
   Can't I glean these from jar and/or pom?  Maybe not? I shall asumme not for now.
* Reintroduce hardcoded config
   The hardcoded config specifies overrides for specific projects with regards to both api analysis and doc parsing.
   I'll need to separate the two. I am only interested in api analysis.
* Reintroduce :exception-handler in runner
* Include args used in result?
   Might be nice to know what :namespaces and :languages were requested (Actually did I accidentally turf this?)
   Also GMT of run sounds useful.
* printlns are a bit odd for general consumption
   switch to logging?
   provide a quiet option?
* edn only as commandline perhaps a bit awkward
   totally appropriate for cljdoc usage.
   but for general usage might be a bit awkward
* consider output to stdout for piping?
   Think of borkdude's tools here. Might be nice to simply pipe metadata output through other tools
